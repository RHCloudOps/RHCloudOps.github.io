<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Tomcat+Nginx负载均衡(3.2.4)</title>
    <url>/2024/08/13/Tomcat+Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1(3.2.4)/</url>
    <content><![CDATA[<h1 id="Tomcat-Nginx负载均衡"><a href="#Tomcat-Nginx负载均衡" class="headerlink" title="Tomcat+Nginx负载均衡"></a>Tomcat+Nginx负载均衡</h1><h2 id="一、Nginx负载均衡的作用"><a href="#一、Nginx负载均衡的作用" class="headerlink" title="一、Nginx负载均衡的作用"></a>一、Nginx负载均衡的作用</h2><p>在单机上运行多个 Tomcat 实例，并将它们与 Nginx 配合使用进行负载均衡，可以带来以下好处：</p>
<h3 id="1-提高资源利用率："><a href="#1-提高资源利用率：" class="headerlink" title="1.提高资源利用率："></a>1.提高资源利用率：</h3><ul>
<li><strong>最大化使用单台机器的计算资源</strong>：通过在同一台服务器上运行多个 Tomcat 实例，可以更好地利用 CPU 和内存资源。这尤其在虚拟化环境中有效。</li>
</ul>
<h3 id="2-负载分配："><a href="#2-负载分配：" class="headerlink" title="2.负载分配："></a>2.负载分配：</h3><ul>
<li><strong>均衡请求负载</strong>：Nginx 作为负载均衡器，可以将用户请求分配到不同的 Tomcat 实例上，这样可以避免某个实例过载，提升整体性能。</li>
<li><strong>动态调整</strong>：Nginx 可以根据不同实例的负载情况，智能地调整请求的分配策略。</li>
</ul>
<h3 id="3-性能优化："><a href="#3-性能优化：" class="headerlink" title="3.性能优化："></a>3.性能优化：</h3><ul>
<li><strong>缓存和静态内容处理</strong>：Nginx 可以缓存响应结果，直接处理静态内容，减轻 Tomcat 实例的负担，提高响应速度。</li>
<li><strong>减少 Tomcat 的处理负担</strong>：通过将静态内容交由 Nginx 处理，Tomcat 可以专注于处理动态请求，从而提高效率。</li>
</ul>
<h3 id="4-易于管理和扩展："><a href="#4-易于管理和扩展：" class="headerlink" title="4.易于管理和扩展："></a>4.易于管理和扩展：</h3><ul>
<li><strong>集中管理</strong>：Nginx 的负载均衡和反向代理功能可以帮助集中管理流量，简化配置和监控。</li>
<li><strong>方便扩展</strong>：如果未来需要扩展到更多的 Tomcat 实例或多台服务器，Nginx 负载均衡的设置可以轻松适应扩展需求。</li>
</ul>
<h2 id="二、必须完成的配置"><a href="#二、必须完成的配置" class="headerlink" title="二、必须完成的配置"></a>二、必须完成的配置</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><p><strong>1.1Apache-Tomcat-8.0.53</strong> </p>
<p><strong>1.2JDK1.8.0_211-b12</strong></p>
<p><strong>1.3MariaDB-5.5.68</strong></p>
<p><strong>1.4JAVA的Web应用</strong></p>
<p><strong>1.5tomcat单机多实例</strong></p>
<blockquote>
<p>这里以上一篇文档配置的Tomcat 单机多实例的基础上演示！！！</p>
</blockquote>
<h3 id="2-yum安装Nginx1-26-1"><a href="#2-yum安装Nginx1-26-1" class="headerlink" title="2.yum安装Nginx1.26.1"></a>2.yum安装Nginx1.26.1</h3><h4 id="2-1安装-EPEL-仓库"><a href="#2-1安装-EPEL-仓库" class="headerlink" title="2.1安装 EPEL 仓库"></a>2.1安装 EPEL 仓库</h4><p>Nginx 在默认的 CentOS 仓库中通常不包含最新版本，因此需要安装 EPEL 仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install epel-release</span><br><span class="line">更新完毕:</span><br><span class="line">  epel-release.noarch 0:7-14                                                   </span><br><span class="line">完毕！</span><br></pre></td></tr></table></figure>



<h4 id="2-2创建-Nginx-官方仓库文件"><a href="#2-2创建-Nginx-官方仓库文件" class="headerlink" title="2.2创建 Nginx 官方仓库文件"></a>2.2创建 Nginx 官方仓库文件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>

<p>  然后将以下内容粘贴到文件中：</p>
   <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[nginx]</span></span><br><span class="line"><span class="attr">name</span>=nginx repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/centos/<span class="number">7</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<h4 id="2-3安装-Nginx1-26-1"><a href="#2-3安装-Nginx1-26-1" class="headerlink" title="2.3安装 Nginx1.26.1"></a>2.3安装 Nginx1.26.1</h4><p>首先，可以检查仓库中是否包含所需版本的 Nginx：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum list nginx --show-duplicates</span><br><span class="line">nginx.x86_64      1:1.26.0-1.el7.ngx                   nginx-stable </span><br><span class="line">nginx.x86_64      1:1.26.1-1.el7.ngx                   nginx-stable </span><br><span class="line">nginx.x86_64      1:1.26.1-2.el7.ngx                   nginx-stable</span><br></pre></td></tr></table></figure>



<p>然后使用 yum安装特定版本的 Nginx：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install nginx-1.26.1</span><br><span class="line">已安装:</span><br><span class="line">  nginx.x86_64 1:1.26.1-2.el7.ngx                                              </span><br><span class="line">作为依赖被安装:</span><br><span class="line">  pcre2.x86_64 0:10.23-2.el7                                                   </span><br><span class="line">完毕！</span><br></pre></td></tr></table></figure>



<h4 id="2-4启动和启用-Nginx-服务"><a href="#2-4启动和启用-Nginx-服务" class="headerlink" title="2.4启动和启用 Nginx 服务"></a>2.4启动和启用 Nginx 服务</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start nginx</span><br><span class="line">[root@localhost ~]# systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br></pre></td></tr></table></figure>



<h4 id="2-5检查-Nginx-版本以确认安装"><a href="#2-5检查-Nginx-版本以确认安装" class="headerlink" title="2.5检查 Nginx 版本以确认安装"></a>2.5检查 Nginx 版本以确认安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# nginx -v</span><br><span class="line">nginx version: nginx/1.26.1</span><br></pre></td></tr></table></figure>



<h2 id="三、Tomcat-Nginx负载均衡配置"><a href="#三、Tomcat-Nginx负载均衡配置" class="headerlink" title="三、Tomcat+Nginx负载均衡配置"></a>三、Tomcat+Nginx负载均衡配置</h2><h3 id="1-在-etc-nginx目录中创建子配置文件nginx-conf"><a href="#1-在-etc-nginx目录中创建子配置文件nginx-conf" class="headerlink" title="1.在&#x2F;etc&#x2F;nginx目录中创建子配置文件nginx.conf"></a>1.在&#x2F;etc&#x2F;nginx目录中创建子配置文件nginx.conf</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>



<h3 id="2-在http-模块的最后添加以下内容"><a href="#2-在http-模块的最后添加以下内容" class="headerlink" title="2.在http{ }模块的最后添加以下内容"></a>2.在http{ }模块的最后添加以下内容</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"> upstream tomcat_pool &#123;</span><br><span class="line">    <span class="comment">#所有 Tomcat 服务器的权重都是 1，所以请求会均匀分配</span></span><br><span class="line">    <span class="comment">#如果在 2 秒内，某个服务器出现 2 次失败，它会被标记为不可用</span></span><br><span class="line">    server 192.168.133.134:8081 <span class="attr">weight</span>=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">2</span><span class="comment">;</span></span><br><span class="line">    server 192.168.133.134:8082 <span class="attr">weight</span>=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">2</span><span class="comment">;</span></span><br><span class="line">    server 192.168.133.134:8083 <span class="attr">weight</span>=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">2</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80<span class="comment">;</span></span><br><span class="line">    server_name  localhost<span class="comment">;</span></span><br><span class="line">    access_log  /var/log/nginx/access.log  main<span class="comment">;</span></span><br><span class="line">location / &#123;</span><br><span class="line">            proxy_pass http://tomcat_pool<span class="comment">;</span></span><br><span class="line">            proxy_redirect off<span class="comment">;</span></span><br><span class="line">            proxy_set_header Host $host<span class="comment">;</span></span><br><span class="line">            <span class="comment">#重新定义或者添加发往后端服务器的请求头</span></span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr<span class="comment">;</span></span><br><span class="line">            <span class="comment">#将客户端真实IP地址传递给后端服务器</span></span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for<span class="comment">;</span></span><br><span class="line">            <span class="comment">#将代理服务的IP信息传递给后端服务器</span></span><br><span class="line">            &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-检查Nginx语法并启动"><a href="#3-检查Nginx语法并启动" class="headerlink" title="3.检查Nginx语法并启动"></a>3.检查Nginx语法并启动</h3><h4 id="3-1检查Nginx语法"><a href="#3-1检查Nginx语法" class="headerlink" title="3.1检查Nginx语法"></a>3.1检查Nginx语法</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# nginx -t</span><br><span class="line">nginx: [warn] conflicting server name <span class="string">&quot;localhost&quot;</span> on 0.0.0.0:80, ignored</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure>



<h4 id="3-2重启Nginx服务"><a href="#3-2重启Nginx服务" class="headerlink" title="3.2重启Nginx服务"></a>3.2重启Nginx服务</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl restart nginx</span><br></pre></td></tr></table></figure>



<h2 id="四、测试nginx负载"><a href="#四、测试nginx负载" class="headerlink" title="四、测试nginx负载"></a>四、测试nginx负载</h2><h3 id="1-Nginx-反向代理配置没有生效-error"><a href="#1-Nginx-反向代理配置没有生效-error" class="headerlink" title="1.Nginx 反向代理配置没有生效(error)"></a>1.Nginx 反向代理配置没有生效(error)</h3><p><strong>访问服务器IP，无需添加端口号</strong></p>
<blockquote>
<p><a href="http://192.168.133.134/">http://192.168.133.134</a></p>
</blockquote>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/324001.png" alt="324001"></p>
<p>显示Welcome to nginx!的页面，说明 Nginx 反向代理配置没有生效！可能是 Nginx 配置中有其他 <code>server</code> 块处理了端口 80 上的请求。检查是否有其他配置文件或 <code>server</code> 块可能会影响配置！</p>
<h3 id="2-检查-Nginx-默认页面"><a href="#2-检查-Nginx-默认页面" class="headerlink" title="2.检查 Nginx 默认页面"></a>2.检查 Nginx 默认页面</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# grep -r <span class="string">&quot;server &#123;&quot;</span> /etc/nginx/conf.d/</span><br><span class="line">/etc/nginx/conf.d/default.conf:server &#123;</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# grep -r <span class="string">&quot;server &#123;&quot;</span> /etc/nginx/nginx.conf</span><br><span class="line">    server &#123;</span><br></pre></td></tr></table></figure>

<p> <strong><code>grep</code> 结果显示在 <code>/etc/nginx/conf.d/default.conf</code> 中有一个 <code>server</code> 块</strong></p>
<h3 id="3-修改配置文件default-conf"><a href="#3-修改配置文件default-conf" class="headerlink" title="3.修改配置文件default.conf"></a>3.修改配置文件default.conf</h3><h4 id="3-1查看default-conf文件内容"><a href="#3-1查看default-conf文件内容" class="headerlink" title="3.1查看default.conf文件内容"></a>3.1查看default.conf文件内容</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>

<p><strong>这个配置导致访问 <code>192.168.133.134</code> 时展示默认页面</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80<span class="comment">;</span></span><br><span class="line">    server_name  localhost<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html<span class="comment">;</span></span><br><span class="line">        index  index.html index.htm<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2反向代理Tomcat作为后端服务器"><a href="#3-2反向代理Tomcat作为后端服务器" class="headerlink" title="3.2反向代理Tomcat作为后端服务器"></a>3.2反向代理Tomcat作为后端服务器</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>

<p><strong>修改server { }模块中location &#x2F; { }的部分</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80<span class="comment">;</span></span><br><span class="line">    server_name  localhost<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://tomcat_pool<span class="comment">;</span></span><br><span class="line">        proxy_redirect off<span class="comment">;</span></span><br><span class="line">        proxy_set_header Host $host<span class="comment">;</span></span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr<span class="comment">;</span></span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>proxy_pass</strong>：Nginx 中的一个指令，用于指定将请求代理到哪个 URL 或后端服务器。</p>
</li>
<li><p><strong><a href="http://tomcat_pool/">http://tomcat_pool</a></strong>：这是要代理到的目标地址。这里的 <code>tomcat_pool</code> 并不是一个直接的 URL，而是一个在 Nginx 配置文件中定义的服务器池名称。</p>
</li>
<li><p>**服务器池 (server pool)**：在 Nginx 中，你可以定义一个或多个服务器池，这些服务器池包含一个或多个后端服务器的列表。通过这种方式，可以实现负载均衡和故障转移等功能。</p>
</li>
</ul>
<h2 id="五、重新加载-Nginx-配置并查看负载均衡状态"><a href="#五、重新加载-Nginx-配置并查看负载均衡状态" class="headerlink" title="五、重新加载 Nginx 配置并查看负载均衡状态"></a>五、重新加载 Nginx 配置并查看负载均衡状态</h2><h3 id="1-重新加载-Nginx-配置"><a href="#1-重新加载-Nginx-配置" class="headerlink" title="1.重新加载 Nginx 配置"></a>1.重新加载 Nginx 配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# nginx -t</span><br><span class="line">nginx: [warn] conflicting server name <span class="string">&quot;localhost&quot;</span> on 0.0.0.0:80, ignored</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# systemctl reload nginx</span><br></pre></td></tr></table></figure>



<h3 id="2-访问服务器IP显示JavaWeb页面"><a href="#2-访问服务器IP显示JavaWeb页面" class="headerlink" title="2.访问服务器IP显示JavaWeb页面"></a>2.访问服务器IP显示JavaWeb页面</h3><p><strong>无需加端口也能访问到Tomcat部署的JavaWeb应用</strong></p>
<blockquote>
<p><a href="http://192.168.133.134/">http://192.168.133.134</a></p>
</blockquote>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/324002.png" alt="324002"></p>
]]></content>
      <categories>
        <category>第三阶段：大型网站高阶架构</category>
        <category>2.Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>JDK</tag>
        <tag>mariadb</tag>
        <tag>JavaWeb</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx面试题(3.1.0)</title>
    <url>/2024/08/14/Nginx%E9%9D%A2%E8%AF%95%E9%A2%98(3.1.0)/</url>
    <content><![CDATA[<h1 id="Nginx面试题"><a href="#Nginx面试题" class="headerlink" title="Nginx面试题"></a>Nginx面试题</h1><h2 id="1-Nginx-的工作原理是什么？"><a href="#1-Nginx-的工作原理是什么？" class="headerlink" title="1. Nginx 的工作原理是什么？"></a>1. Nginx 的工作原理是什么？</h2><p>Nginx 是一个高性能的 HTTP 和反向代理服务器，同时也可以作为邮件代理服务器。它的工作原理基于事件驱动和异步处理模型：</p>
<ul>
<li><strong>事件驱动</strong>：Nginx 使用事件驱动的架构来处理请求，这意味着它能够处理大量的并发连接而不会阻塞。</li>
<li><strong>异步处理</strong>：Nginx 的每个工作进程可以同时处理多个请求，这种异步非阻塞的处理方式使得 Nginx 在处理高并发时表现优秀。</li>
</ul>
<h2 id="2-Nginx-和-Apache-有什么区别？"><a href="#2-Nginx-和-Apache-有什么区别？" class="headerlink" title="2. Nginx 和 Apache 有什么区别？"></a>2. Nginx 和 Apache 有什么区别？</h2><ul>
<li><strong>架构</strong>：Nginx 使用事件驱动架构，支持异步处理；Apache 默认使用多进程或线程处理请求，可能在高并发场景下性能较差。</li>
<li><strong>性能</strong>：Nginx 通常比 Apache 处理静态内容的性能更好，因为它的事件驱动架构可以更高效地处理大量的并发请求。</li>
<li><strong>配置</strong>：Nginx 的配置文件语法相对简洁，而 Apache 的配置可能更复杂。</li>
<li><strong>资源使用</strong>：Nginx 通常比 Apache 使用更少的内存和 CPU 资源。</li>
</ul>
<h2 id="3-什么是反向代理？Nginx-如何实现反向代理功能？"><a href="#3-什么是反向代理？Nginx-如何实现反向代理功能？" class="headerlink" title="3. 什么是反向代理？Nginx 如何实现反向代理功能？"></a>3. 什么是反向代理？Nginx 如何实现反向代理功能？</h2><ul>
<li><strong>反向代理</strong>：反向代理是指代理服务器向客户端隐藏了实际的服务器。客户端请求经过反向代理服务器，然后由反向代理服务器转发到实际的后端服务器，再将响应返回给客户端。</li>
<li><strong>Nginx 实现反向代理</strong>：在 Nginx 中，可以通过 <code>proxy_pass</code> 指令配置反向代理。例如：<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://backend-server;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-如何实现负载均衡？"><a href="#4-如何实现负载均衡？" class="headerlink" title="4. 如何实现负载均衡？"></a>4. 如何实现负载均衡？</h2><p>Nginx 支持多种负载均衡算法，可以通过在 <code>upstream</code> 块中定义服务器组来实现负载均衡。例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">upstream</span> backend &#123;</span><br><span class="line">        <span class="attribute">server</span> backend1.example.com;</span><br><span class="line">        <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-轮询、权重、ip-hash、fair-和-url-hash-是-Nginx-负载均衡的哪些算法？"><a href="#5-轮询、权重、ip-hash、fair-和-url-hash-是-Nginx-负载均衡的哪些算法？" class="headerlink" title="5. 轮询、权重、ip_hash、fair 和 url_hash 是 Nginx 负载均衡的哪些算法？"></a>5. 轮询、权重、ip_hash、fair 和 url_hash 是 Nginx 负载均衡的哪些算法？</h2><ul>
<li>**轮询 (Round Robin)**：默认负载均衡算法，依次将请求分配给每个服务器。</li>
<li>**权重 (Weight)**：根据服务器的权重来分配请求，权重较高的服务器接收更多请求。</li>
<li><strong>ip_hash</strong>：根据客户端的 IP 地址哈希值来分配请求，确保相同 IP 地址的请求会被发送到同一台服务器。</li>
<li><strong>fair</strong>：基于请求的响应时间分配请求，将请求发送到响应时间较短的服务器。（需要安装 <code>nginx-upstream-fair</code> 模块）</li>
<li><strong>url_hash</strong>：根据请求的 URL 哈希值来分配请求，确保相同 URL 的请求会被发送到同一台服务器。（需要安装 <code>nginx-upstream-hash</code> 模块）</li>
</ul>
<h2 id="6-如何配置-SSL-证书？"><a href="#6-如何配置-SSL-证书？" class="headerlink" title="6. 如何配置 SSL 证书？"></a>6. 如何配置 SSL 证书？</h2><p>配置 SSL 证书需要在 <code>server</code> 块中使用 <code>ssl_certificate</code> 和 <code>ssl_certificate_key</code> 指令：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/example.com.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/example.com.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 其他 SSL 配置项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-如何实现限流和速率限制？"><a href="#7-如何实现限流和速率限制？" class="headerlink" title="7. 如何实现限流和速率限制？"></a>7. 如何实现限流和速率限制？</h2><p>可以通过 <code>limit_req</code> 和 <code>limit_conn</code> 模块来实现限流和速率限制：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">limit_req_zone</span> <span class="variable">$binary_remote_addr</span> zone=mylimit:<span class="number">10m</span> rate=1r/s;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="section">location</span> /api/ &#123;</span><br><span class="line">            <span class="attribute">limit_req</span> zone=mylimit burst=<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">limit_conn_zone</span> <span class="variable">$binary_remote_addr</span> zone=addr:<span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="section">location</span> /api/ &#123;</span><br><span class="line">            <span class="attribute">limit_conn</span> addr <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="8-如何查看-Nginx-版本？如何处理-Nginx-配置错误？"><a href="#8-如何查看-Nginx-版本？如何处理-Nginx-配置错误？" class="headerlink" title="8. 如何查看 Nginx 版本？如何处理 Nginx 配置错误？"></a>8. 如何查看 Nginx 版本？如何处理 Nginx 配置错误？</h2><ul>
<li><p><strong>查看 Nginx 版本</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>处理配置错误</strong>：使用 <code>nginx -t</code> 检查配置文件的语法错误，并根据提示修正配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="9-Nginx-的状态码有哪些？"><a href="#9-Nginx-的状态码有哪些？" class="headerlink" title="9. Nginx 的状态码有哪些？"></a>9. Nginx 的状态码有哪些？</h2><p>Nginx 主要支持以下状态码：</p>
<ul>
<li><strong>1xx</strong>：信息性状态码（如 100 Continue）</li>
<li><strong>2xx</strong>：成功状态码（如 200 OK, 204 No Content）</li>
<li><strong>3xx</strong>：重定向状态码（如 301 Moved Permanently, 302 Found）</li>
<li><strong>4xx</strong>：客户端错误状态码（如 404 Not Found, 403 Forbidden）</li>
<li><strong>5xx</strong>：服务器错误状态码（如 500 Internal Server Error, 502 Bad Gateway）</li>
</ul>
<h2 id="10-Nginx-的目录结构有哪些？"><a href="#10-Nginx-的目录结构有哪些？" class="headerlink" title="10. Nginx 的目录结构有哪些？"></a>10. Nginx 的目录结构有哪些？</h2><p>Nginx 的典型目录结构包括：</p>
<ul>
<li>**<code>/etc/nginx/</code>**：配置文件目录</li>
<li>**<code>/usr/share/nginx/</code>**：默认的 HTML 文件目录</li>
<li>**<code>/var/log/nginx/</code>**：日志文件目录</li>
<li>**<code>/var/cache/nginx/</code>**：缓存目录（如果配置了缓存）</li>
</ul>
<h2 id="11-Nginx-如何处理静态文件缓存？"><a href="#11-Nginx-如何处理静态文件缓存？" class="headerlink" title="11. Nginx 如何处理静态文件缓存？"></a>11. Nginx 如何处理静态文件缓存？</h2><p>可以使用 <code>expires</code> 指令配置静态文件的缓存策略。例如：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> /static/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/html;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这将使 <code>/static/</code> 目录下的文件在浏览器缓存中存储 30 天。</p>
]]></content>
      <categories>
        <category>第三阶段：大型网站高阶架构</category>
        <category>1.Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>以jspgou为例部署传统javaweb项目(3.2.2)</title>
    <url>/2024/08/13/%E4%BB%A5jspgou%E4%B8%BA%E4%BE%8B%E9%83%A8%E7%BD%B2%E4%BC%A0%E7%BB%9Fjavaweb%E9%A1%B9%E7%9B%AE(3.2.2)/</url>
    <content><![CDATA[<h1 id="以jspgou为例部署传统javaweb项目"><a href="#以jspgou为例部署传统javaweb项目" class="headerlink" title="以jspgou为例部署传统javaweb项目"></a>以jspgou为例部署传统javaweb项目</h1><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.关闭防火墙</span><br><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">  <span class="comment">#systemctl stop firewalld 只是临时停止服务。</span></span><br><span class="line">  <span class="comment">#systemctl disable firewalld 禁止服务开机启动，但不影响当前状态。 </span></span><br><span class="line"></span><br><span class="line">2.关闭 selinux</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line"></span><br><span class="line">3.yum安装必要工具</span><br><span class="line">[root@localhost ~]# yum -y install wget</span><br><span class="line">[root@localhost ~]# yum -y install unzip</span><br></pre></td></tr></table></figure>



<h3 id="必须完成的配置"><a href="#必须完成的配置" class="headerlink" title="必须完成的配置"></a>必须完成的配置</h3><p><strong>1.Apache-Tomcat-8.0.53</strong> </p>
<p><strong>2.JDK1.8.0_211-b12</strong></p>
<h2 id="二、mariadb数据库的安装和配置"><a href="#二、mariadb数据库的安装和配置" class="headerlink" title="二、mariadb数据库的安装和配置"></a>二、mariadb数据库的安装和配置</h2><h3 id="2-1安装mariadb及其服务"><a href="#2-1安装mariadb及其服务" class="headerlink" title="2.1安装mariadb及其服务"></a>2.1安装mariadb及其服务</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install mariadb mariadb-server -y</span><br><span class="line">已安装:</span><br><span class="line">  mariadb.x86_64 1:5.5.68-1.el7   mariadb-server.x86_64 1:5.5.68-1.el7  </span><br><span class="line"></span><br><span class="line">[root@localhost ~]# systemctl start mariadb</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# mysqladmin -uroot password <span class="string">&#x27;123&#x27;</span>   </span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span> /usr/local/tomcat/webapps/</span><br><span class="line">docs  examples  host-manager  manager  ROOT</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span> /usr/local/tomcat/webapps/ROOT</span><br><span class="line">asf-logo-wide.svg  bg-nav.png    RELEASE-NOTES.txt  tomcat-power.gif</span><br><span class="line">bg-button.png      bg-upper.png  tomcat.css         tomcat.svg</span><br><span class="line">bg-middle.png      favicon.ico   tomcat.gif         WEB-INF</span><br><span class="line">bg-nav-item.png    index.jsp     tomcat.png</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-2创建数据库"><a href="#2-2创建数据库" class="headerlink" title="2.2创建数据库"></a>2.2创建数据库</h3><p><strong>使用root用户登录mysql数据库</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mysql -uroot -p<span class="string">&#x27;123&#x27;</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection <span class="built_in">id</span> is 3</span><br><span class="line">Server version: 5.5.68-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; </span><br></pre></td></tr></table></figure>



<p><strong>在mysql数据库中创建jspgou数据库，字符集为utf-8</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">create</span> database jspgou <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> jspgou             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> exit</span><br><span class="line">Bye</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>重启mariadb数据库</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl restart mariadb</span><br></pre></td></tr></table></figure>



<h3 id="2-3下载jspgouV6安装包并解压"><a href="#2-3下载jspgouV6安装包并解压" class="headerlink" title="2.3下载jspgouV6安装包并解压"></a>2.3下载jspgouV6安装包并解压</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1、上传项目包jspgouV6-ROOT.zip</span><br><span class="line">wget ftp://10.36.105.250//notes/stage3/2.tomcat/package/jspgouV6-ROOT.zip</span><br><span class="line"></span><br><span class="line">2、解压</span><br><span class="line">[root@localhost ~]# unzip  jspgouV6-ROOT.zip</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg       jspgouV6-ROOT.zip       必读.txt</span><br><span class="line">DB        ROOT</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-4修改jspgou程序的数据库配置"><a href="#2-4修改jspgou程序的数据库配置" class="headerlink" title="2.4修改jspgou程序的数据库配置"></a>2.4修改jspgou程序的数据库配置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">cd</span> ROOT/WEB-INF/config/</span><br><span class="line">[root@localhost config]# <span class="built_in">ls</span></span><br><span class="line">application-context.xml  jspgou-admin-servlet.xml</span><br><span class="line">cache-context.xml        jspgou-context.xml</span><br><span class="line">checkcode-context.xml    jspgou-front-servlet.xml</span><br><span class="line">jdbc.properties          jspgou-servlet-admin-api.xml</span><br><span class="line">jeecore-context.xml      plug</span><br><span class="line">jspgou                   shiro-context.xml</span><br><span class="line"></span><br><span class="line">[root@localhost config]# vim jdbc.properties</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序包内ROOT/WEB-INF/config/jdbc.properties文件第20行</span></span><br><span class="line">jdbc.url=jdbc:mysql://127.0.0.1:3306jspgou?characterEncoding=UTF-8</span><br><span class="line">jdbc.username=root   <span class="comment">#在生产环境中必须用普通账户</span></span><br><span class="line">jdbc.password=123</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-5-导入数据"><a href="#2-5-导入数据" class="headerlink" title="2.5.导入数据"></a>2.5.导入数据</h3><ul>
<li>将压缩包内 DB文件夹中jspgou.sql文件导入至创建好的jspgou数据库中，</li>
<li>如导入中出现执行sql语句过长问题，请修改mysql配置文件my.cnf中max_allowed_packet参数为64m，默认为1m</li>
<li>导入数据库时如果报错：把所有datetime类型的字段默认值改成CURRENT_TIMESTAMP</li>
<li><strong>注意：如果用Mariadb数据库不会出现如上错误，可以直接导入</strong></li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@tomcat DB]# mysql -uroot -p123 -D jspgou &lt; /root/DB/jspgou.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#-D：指定数据库，找到jspgou软件包中数据库jspgou.sql的位置</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="三、部署网站"><a href="#三、部署网站" class="headerlink" title="三、部署网站"></a>三、部署网站</h2><h3 id="3-1启动tomcat并查看端口"><a href="#3-1启动tomcat并查看端口" class="headerlink" title="3.1启动tomcat并查看端口"></a>3.1启动tomcat并查看端口</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">将程序解压后的ROOT文件夹拷贝到tomcat安装目录下的webapps文件夹下（例如：/usr/local/tomcat/webapps/），启动tomcat，启动后检查一下端口</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以先将webapps下面的所有文件删掉</span></span><br><span class="line">[root@localhost DB]# <span class="built_in">rm</span> -rf /usr/local/tomcat/webapps/*</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回/root目录</span></span><br><span class="line">[root@localhost ~]# <span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">cp</span> ROOT/ /usr/local/tomcat/webapps/ -r</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法1：默认重启tomcat（没有对tomcat进行systemd托管）</span></span><br><span class="line">[root@localhost ~]# /usr/local/tomcat/bin/shutdown.sh</span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/java</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# /usr/local/tomcat/bin/startup.sh</span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/java</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法2：systemctl重启tomcat（有对tomcat进行systemd托管）</span></span><br><span class="line">[root@localhost ~]# systemctl restart tomcat.service</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# netstat -ntlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      2412/mysqld         </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      996/sshd            </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1247/master         </span><br><span class="line">tcp6       0      0 127.0.0.1:8005          :::*                    LISTEN      12878/java          </span><br><span class="line">tcp6       0      0 :::8009                 :::*                    LISTEN      12878/java          </span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      12878/java          </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      996/sshd            </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1247/master         </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-2部署成功验证"><a href="#3-2部署成功验证" class="headerlink" title="3.2部署成功验证"></a>3.2部署成功验证</h3><p><strong>在浏览器输入以下地址，如能正常显示，即表示部署成功</strong></p>
<blockquote>
<p><a href="http://192.168.133.134:8080/">http://192.168.133.134:8080</a></p>
</blockquote>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/322001.png" alt="322001"></p>
<p><strong>系统管理后台登录：</strong></p>
<blockquote>
<p><a href="http://192.168.133.134:8080/jeeadmin/jspgou/index.do">http://192.168.133.134:8080/jeeadmin/jspgou/index.do</a></p>
<p>用户名：admin</p>
<p>密码：123456</p>
</blockquote>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/322002.png" alt="322002"></p>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/322003.png" alt="322003"></p>
]]></content>
      <categories>
        <category>第三阶段：大型网站高阶架构</category>
        <category>2.Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>JDK</tag>
        <tag>mariadb</tag>
        <tag>jspgou</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat单机多实例(3.2.3)</title>
    <url>/2024/08/13/Tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B(3.2.3)/</url>
    <content><![CDATA[<h1 id="Tomcat-单机多实例"><a href="#Tomcat-单机多实例" class="headerlink" title="Tomcat 单机多实例"></a>Tomcat 单机多实例</h1><h2 id="一、多实例的作用："><a href="#一、多实例的作用：" class="headerlink" title="一、多实例的作用："></a>一、多实例的作用：</h2><p><strong>单实例并发上限：175（生产环境测试结果）官方测试并发上限200</strong></p>
<ul>
<li>多实例运行不同的应用（类似虚拟主机）</li>
<li>多实例运行相同的应用（实现负载均衡，支持高并发处理，session问题）</li>
</ul>
<h2 id="二、tomcat单机多实例配置大纲"><a href="#二、tomcat单机多实例配置大纲" class="headerlink" title="二、tomcat单机多实例配置大纲"></a>二、tomcat单机多实例配置大纲</h2><p>IP地址：Connector port连接器端口——（Server port服务器端口）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.133.134:8081-(8091)</span><br><span class="line">192.168.133.134:8082-(8092)</span><br><span class="line">192.168.133.134:8083-(8093)</span><br></pre></td></tr></table></figure>



<h2 id="三、环境准备"><a href="#三、环境准备" class="headerlink" title="三、环境准备"></a>三、环境准备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">  <span class="comment">#systemctl stop firewalld 只是临时停止服务。</span></span><br><span class="line">  <span class="comment">#systemctl disable firewalld 禁止服务开机启动，但不影响当前状态。 </span></span><br><span class="line"></span><br><span class="line">2.关闭 selinux</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line"></span><br><span class="line">3.yum安装必要工具</span><br><span class="line">[root@localhost tomcat]# yum -y install tree</span><br></pre></td></tr></table></figure>



<h3 id="必须完成的配置"><a href="#必须完成的配置" class="headerlink" title="必须完成的配置"></a>必须完成的配置</h3><p><strong>1.Apache-Tomcat-8.0.53</strong> </p>
<p><strong>2.JDK1.8.0_211-b12</strong></p>
<p><strong>3.MariaDB-5.5.68</strong></p>
<p><strong>4.JAVA的Web应用</strong></p>
<blockquote>
<p>这里以上一篇文档配置的jspgou商城应用作为演示！！！</p>
</blockquote>
<p><strong>5.&#x2F;webapps&#x2F;ROOT</strong></p>
<p>拷贝原来单实例&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT&#x2F;到&#x2F;webapps&#x2F;ROOT</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> /webapps</span><br><span class="line">[root@localhost ~]# <span class="built_in">cp</span> -r /usr/local/tomcat/webapps/ROOT/ /webapps/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>6.关闭之前的单实例</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/tomcat/bin/shutdown.sh</span><br></pre></td></tr></table></figure>



<h2 id="四、配置多实例目录"><a href="#四、配置多实例目录" class="headerlink" title="四、配置多实例目录"></a>四、配置多实例目录</h2><h3 id="1-创建目录instance1-instance2-instance3"><a href="#1-创建目录instance1-instance2-instance3" class="headerlink" title="1.创建目录instance1 instance2 instance3"></a>1.创建目录instance1 instance2 instance3</h3><p><strong>以单实例为基础配置多实例目录：分别创建目录instance1 instance2 instance3，拷贝原来的conf,logs,temp,work到3个目录下</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">mkdir</span> /usr/local/tomcat/instance&#123;1..3&#125;</span><br><span class="line">[root@localhost ~]# <span class="built_in">cp</span> -r /usr/local/tomcat/&#123;conf,logs,temp,work&#125;   /usr/local/tomcat/instance1/</span><br><span class="line">[root@localhost ~]# <span class="built_in">cp</span> -r /usr/local/tomcat/&#123;conf,logs,temp,work&#125;   /usr/local/tomcat/instance2/</span><br><span class="line">[root@localhost ~]# <span class="built_in">cp</span> -r /usr/local/tomcat/&#123;conf,logs,temp,work&#125;   /usr/local/tomcat/instance3/   </span><br><span class="line">[root@localhost ~]# tree -d -L 2 /usr/local/tomcat/</span><br><span class="line">/usr/local/tomcat/</span><br><span class="line">├── bin</span><br><span class="line">├── conf</span><br><span class="line">│   └── Catalina</span><br><span class="line">├── instance1</span><br><span class="line">│   ├── conf</span><br><span class="line">│   ├── logs</span><br><span class="line">│   ├── temp</span><br><span class="line">│   └── work</span><br><span class="line">├── instance2</span><br><span class="line">│   ├── conf</span><br><span class="line">│   ├── logs</span><br><span class="line">│   ├── temp</span><br><span class="line">│   └── work</span><br><span class="line">├── instance3</span><br><span class="line">│   ├── conf</span><br><span class="line">│   ├── logs</span><br><span class="line">│   ├── temp</span><br><span class="line">│   └── work</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-配置实例server-xml"><a href="#2-配置实例server-xml" class="headerlink" title="2.配置实例server.xml"></a>2.配置实例server.xml</h3><h4 id="2-1实例1配置修改"><a href="#2-1实例1配置修改" class="headerlink" title="2.1实例1配置修改"></a>2.1实例1配置修改</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/tomcat/instance1/conf/server.xml</span><br><span class="line">22 &lt;Server port=<span class="string">&quot;8091&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><br><span class="line">//Server port修改为8091</span><br><span class="line"></span><br><span class="line">69     &lt;Connector port=<span class="string">&quot;8081&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">70                connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">71                redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line">//Connector port修改为8081</span><br><span class="line"></span><br><span class="line">91     &lt;!--&lt;Connector port=<span class="string">&quot;8009&quot;</span> protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443    &quot;</span> /&gt;--&gt;</span><br><span class="line">//将8009端口这一行注释掉</span><br><span class="line"></span><br><span class="line">123       &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;/webapps&quot;</span> //修改网站基准目录为/webapps</span><br><span class="line">124             unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-2实例2配置修改"><a href="#2-2实例2配置修改" class="headerlink" title="2.2实例2配置修改"></a>2.2实例2配置修改</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/tomcat/instance2/conf/server.xml</span><br><span class="line">22 &lt;Server port=<span class="string">&quot;8092&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><br><span class="line">//Server port修改为8092</span><br><span class="line"></span><br><span class="line">69     &lt;Connector port=<span class="string">&quot;8082&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">70                connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">71                redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line">//Connector port修改为8082</span><br><span class="line"></span><br><span class="line">91     &lt;!--&lt;Connector port=<span class="string">&quot;8009&quot;</span> protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443    &quot;</span> /&gt;--&gt;</span><br><span class="line">//将8009端口这一行注释掉</span><br><span class="line"></span><br><span class="line">123       &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;/webapps&quot;</span> //修改网站基准目录为/webapps</span><br><span class="line">124             unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-3实例3配置修改"><a href="#2-3实例3配置修改" class="headerlink" title="2.3实例3配置修改"></a>2.3实例3配置修改</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/tomcat/instance3/conf/server.xml</span><br><span class="line">22 &lt;Server port=<span class="string">&quot;8093&quot;</span> shutdown=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span><br><span class="line">//Server port修改为8093</span><br><span class="line"></span><br><span class="line">69     &lt;Connector port=<span class="string">&quot;8083&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span></span><br><span class="line">70                connectionTimeout=<span class="string">&quot;20000&quot;</span></span><br><span class="line">71                redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line">//Connector port修改为8083</span><br><span class="line"></span><br><span class="line">91     &lt;!--&lt;Connector port=<span class="string">&quot;8009&quot;</span> protocol=<span class="string">&quot;AJP/1.3&quot;</span> redirectPort=<span class="string">&quot;8443    &quot;</span> /&gt;--&gt;</span><br><span class="line">//将8009端口这一行注释掉</span><br><span class="line"></span><br><span class="line">123       &lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;/webapps&quot;</span> //修改网站基准目录为/webapps</span><br><span class="line">124             unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-编写启动脚本"><a href="#3-编写启动脚本" class="headerlink" title="3.编写启动脚本"></a>3.编写启动脚本</h3><h4 id="3-1实例1的启动脚本"><a href="#3-1实例1的启动脚本" class="headerlink" title="3.1实例1的启动脚本"></a>3.1实例1的启动脚本</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/tomcat/instance1/ins1.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#instans1</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=<span class="string">&quot;/usr/local/tomcat&quot;</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=<span class="string">&quot;/usr/local/tomcat/instance1&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/startup.sh;;</span><br><span class="line">stop)</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh;;</span><br><span class="line">restart)</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh</span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/startup.sh;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">chmod</span> a+x   /usr/local/tomcat/instance1/ins1.sh</span><br></pre></td></tr></table></figure>



<h4 id="3-2实例2的启动脚本"><a href="#3-2实例2的启动脚本" class="headerlink" title="3.2实例2的启动脚本"></a>3.2实例2的启动脚本</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/tomcat/instance2/ins2.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#instans2</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=<span class="string">&quot;/usr/local/tomcat&quot;</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=<span class="string">&quot;/usr/local/tomcat/instance2&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/startup.sh;;</span><br><span class="line">stop)</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh;;</span><br><span class="line">restart)</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh</span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/startup.sh;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">chmod</span> a+x   /usr/local/tomcat/instance2/ins2.sh</span><br></pre></td></tr></table></figure>



<h4 id="3-3实例3的启动脚本"><a href="#3-3实例3的启动脚本" class="headerlink" title="3.3实例3的启动脚本"></a>3.3实例3的启动脚本</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/local/tomcat/instance3/ins3.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#instans3</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=<span class="string">&quot;/usr/local/tomcat&quot;</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=<span class="string">&quot;/usr/local/tomcat/instance3&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/startup.sh;;</span><br><span class="line">stop)</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh;;</span><br><span class="line">restart)</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh</span><br><span class="line">    <span class="built_in">sleep</span> 3</span><br><span class="line">    <span class="variable">$CATALINA_HOME</span>/bin/startup.sh;;</span><br><span class="line"><span class="keyword">esac</span> </span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">chmod</span> a+x   /usr/local/tomcat/instance3/ins3.sh</span><br></pre></td></tr></table></figure>



<h4 id="3-4启动测试"><a href="#3-4启动测试" class="headerlink" title="3.4启动测试"></a>3.4启动测试</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/tomcat/instance1/ins1.sh start</span><br><span class="line">[root@localhost ~]# /usr/local/tomcat/instance2/ins2.sh start</span><br><span class="line">[root@localhost ~]# /usr/local/tomcat/instance3/ins3.sh start</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ss -tnlp |grep :80 |column -t</span><br><span class="line">LISTEN  0  128  *:80                     *:*     <span class="built_in">users</span>:((&quot;nginx&quot;,pid=<span class="number">16077</span>,fd=<span class="number">6</span>),(&quot;nginx&quot;,pid=<span class="number">16076</span>,fd=<span class="number">6</span>))</span><br><span class="line">LISTEN  0  100  [::]:8081                [::]:*  <span class="built_in">users</span>:((&quot;java&quot;,pid=<span class="number">13253</span>,fd=<span class="number">47</span>))</span><br><span class="line">LISTEN  0  100  [::]:8082                [::]:*  <span class="built_in">users</span>:((&quot;java&quot;,pid=<span class="number">13829</span>,fd=<span class="number">47</span>))</span><br><span class="line">LISTEN  0  100  [::]:8083                [::]:*  <span class="built_in">users</span>:((&quot;java&quot;,pid=<span class="number">13916</span>,fd=<span class="number">47</span>))</span><br><span class="line">LISTEN  0  1    [::ffff:127.0.0.1]:8091  [::]:*  <span class="built_in">users</span>:((&quot;java&quot;,pid=<span class="number">13253</span>,fd=<span class="number">56</span>))</span><br><span class="line">LISTEN  0  1    [::ffff:127.0.0.1]:8092  [::]:*  <span class="built_in">users</span>:((&quot;java&quot;,pid=<span class="number">13829</span>,fd=<span class="number">56</span>))</span><br><span class="line">LISTEN  0  1    [::ffff:127.0.0.1]:8093  [::]:*  <span class="built_in">users</span>:((&quot;java&quot;,pid=<span class="number">13916</span>,fd=<span class="number">56</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="五、配置成功验证"><a href="#五、配置成功验证" class="headerlink" title="五、配置成功验证"></a>五、配置成功验证</h2><p><strong>在浏览器输入以下地址，如能正常显示，即表示部署成功</strong></p>
<blockquote>
<p><a href="http://192.168.133.134:8081/">http://192.168.133.134:8081</a></p>
</blockquote>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/323001.png" alt="323001"></p>
<blockquote>
<p><a href="http://192.168.133.134:8082/">http://192.168.133.134:8082</a></p>
</blockquote>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/323002.png" alt="323002"></p>
<blockquote>
<p><a href="http://192.168.133.134:8083/">http://192.168.133.134:8083</a></p>
</blockquote>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/323003.png" alt="323003"></p>
]]></content>
      <categories>
        <category>第三阶段：大型网站高阶架构</category>
        <category>2.Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>JDK</tag>
        <tag>mariadb</tag>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat面试题(3.2.0)</title>
    <url>/2024/08/12/Tomcat%E9%9D%A2%E8%AF%95%E9%A2%98(3.2.0)/</url>
    <content><![CDATA[<h1 id="Tomcat面试题"><a href="#Tomcat面试题" class="headerlink" title="Tomcat面试题"></a>Tomcat面试题</h1><h2 id="1-有没有用过web容器？用过什么web容器？"><a href="#1-有没有用过web容器？用过什么web容器？" class="headerlink" title="1.有没有用过web容器？用过什么web容器？"></a>1.有没有用过web容器？用过什么web容器？</h2><p>答：用过，tomcat</p>
<h2 id="2-你上家公司有没有用tomcat？版本是多少？"><a href="#2-你上家公司有没有用tomcat？版本是多少？" class="headerlink" title="2.你上家公司有没有用tomcat？版本是多少？"></a>2.你上家公司有没有用tomcat？版本是多少？</h2><p>答：用过，8.5（企业中用的最多的版本就是8.5.45，8.5稳定且修复的大量bug，稳定大于一切）</p>
<h2 id="3-什么是web容器（web中间件）"><a href="#3-什么是web容器（web中间件）" class="headerlink" title="3.什么是web容器（web中间件）"></a>3.什么是web容器（web中间件）</h2><p>答：<br>web容器是一个可以部署和运行web应用的软件环境。常见的web容器有Tomcat（最广泛使用的应用服务器,专门用来部署Java Web应用）、Jetty（另一个功能强大的轻量级Java应用服务器）、WebLogic（Oracle提供的专业Java EE应用服务器）、JBoss（开源的Java EE全功能应用服务器）和WebSphere（IBM的Java EE应用服务器）。</p>
<h2 id="4-web容器的主要作用有"><a href="#4-web容器的主要作用有" class="headerlink" title="4.web容器的主要作用有"></a>4.web容器的主要作用有</h2><h3 id="4-1封装JVM"><a href="#4-1封装JVM" class="headerlink" title="4.1封装JVM"></a>4.1封装JVM</h3><p>​	web容器提供一个JVM环境，只需要专注于编写business logic，而不用关心JVM的细节。</p>
<h3 id="4-2处理HTTP请求"><a href="#4-2处理HTTP请求" class="headerlink" title="4.2处理HTTP请求"></a>4.2处理HTTP请求</h3><p>​	web容器监听指定端口的HTTP请求，将请求路由到对应的web应用中。</p>
<h3 id="4-3管理web应用生命周期"><a href="#4-3管理web应用生命周期" class="headerlink" title="4.3管理web应用生命周期"></a>4.3管理web应用生命周期</h3><p>​	web容器可以部署、启动、停止和卸载web应用，管理其整个生命周期。</p>
<h3 id="4-4提供类加载器"><a href="#4-4提供类加载器" class="headerlink" title="4.4提供类加载器"></a>4.4提供类加载器</h3><p>​	web容器提供类加载器，为web应用管理字节码，避免與其他应用冲突。</p>
<h3 id="4-5管理线程池"><a href="#4-5管理线程池" class="headerlink" title="4.5管理线程池"></a>4.5管理线程池</h3><p>​	web容器提供线程池来优化资源利用率，处理大量的并发请求。<br>提供其他中间件接口</p>
<h2 id="5-nginx-apache-tomcat的区别？"><a href="#5-nginx-apache-tomcat的区别？" class="headerlink" title="5.nginx apache  tomcat的区别？"></a>5.nginx apache  tomcat的区别？</h2><p>答：<br>Nginx&#x2F;Apache 作为网页服务器，主要提供静态资源<br>Tomcat作为应用服务器，主要处理动态请求，运行 Java 程序<br>Tomcat会生成HTML内容返回给 Nginx&#x2F;Apache 返回给用户<br>Nginx&#x2F;Apache 和 Tomcat 对应用来说是一个整体，都属于应用、软件</p>
<h2 id="6-Tomcat性能优化"><a href="#6-Tomcat性能优化" class="headerlink" title="6.Tomcat性能优化"></a>6.Tomcat性能优化</h2><p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/320001.png" alt="320001"></p>
<h3 id="6-1常规优化"><a href="#6-1常规优化" class="headerlink" title="6.1常规优化"></a>6.1常规优化</h3><ul>
<li><strong>调整堆内存大小</strong>：设置JVM的初始堆大小(-Xms)和最大堆大小(-Xmx)，以及年轻代和永久区的大小。这些参数可以根据应用的内存需求和服务器的硬件配置进行调整，以提高性能和避免内存溢出。</li>
<li><strong>开启GC日志</strong>：通过设置JVM参数来开启垃圾回收的详细日志记录，这有助于监控和分析垃圾回收的行为，从而进行调优。</li>
<li><strong>DNS缓存优化</strong>：设置DNS缓存的TTL（Time To Live）值为0，可以减少DNS查询的次数，提高网络请求的效率。</li>
</ul>
<p><strong>面试回答示例</strong>：</p>
<ul>
<li>面试官问：”你如何对Tomcat的内存进行优化？”<br>回答：”我会根据应用的内存需求和服务器配置，合理设置JVM的堆内存参数，包括初始堆大小(-Xms)和最大堆大小(-Xmx)，以及年轻代和永久区的大小(-XX:NewSize, -XX:NewMaxSize)。此外，我还会开启GC日志，通过分析日志来进一步优化垃圾回收策略。”</li>
</ul>
<h3 id="6-2并发优化"><a href="#6-2并发优化" class="headerlink" title="6.2并发优化"></a>6.2并发优化</h3><ul>
<li><strong>调整线程参数</strong>：在server.xml中设置最大线程数量(maxThreads)、最小空闲线程数(minsparethreads)、最大空闲线程数(maxsparethreads)等参数，以优化Tomcat处理并发请求的能力。</li>
<li><strong>关闭DNS查询</strong>：设置enablelookups为false，关闭自动DNS查询，减少服务器资源消耗。</li>
</ul>
<p><strong>面试回答示例</strong>：</p>
<ul>
<li>面试官问：”Tomcat的并发处理能力如何优化？”<br>回答：”我会在server.xml配置文件中调整线程池参数，比如设置最大线程数和最小&#x2F;最大空闲线程数，以适应不同的并发场景。同时，我会关闭自动DNS查询，以减少不必要的资源消耗和提高响应速度。”</li>
</ul>
<h3 id="6-3安全优化"><a href="#6-3安全优化" class="headerlink" title="6.3安全优化"></a>6.3安全优化</h3><ul>
<li><strong>修改默认端口</strong>：更改Tomcat的默认端口，包括关闭端口和指令端口，以避免未授权访问。</li>
<li><strong>降权启动</strong>：避免使用root用户启动Tomcat，而是使用普通用户权限，以减少安全风险。</li>
<li><strong>隐藏版本号</strong>：修改Tomcat的版本信息，避免敏感信息泄露。</li>
</ul>
<p><strong>面试回答示例</strong>：</p>
<ul>
<li>面试官问：”你如何提高Tomcat的安全性？”<br>回答：”我会从多个方面进行安全优化。首先，我会更改Tomcat的默认端口，避免使用容易被攻击的端口。其次，我会以普通用户权限启动Tomcat，避免使用root权限带来的安全风险。最后，我会隐藏Tomcat的版本信息，减少信息泄露的风险。”</li>
</ul>
]]></content>
      <categories>
        <category>第三阶段：大型网站高阶架构</category>
        <category>2.Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Tomcat和JDK(3.2.1)</title>
    <url>/2024/08/12/%E5%AE%89%E8%A3%85Tomcat%E5%92%8CJDK(3.2.1)/</url>
    <content><![CDATA[<h1 id="安装Tomcat-JDK-重点"><a href="#安装Tomcat-JDK-重点" class="headerlink" title="安装Tomcat &amp; JDK(重点)"></a>安装Tomcat &amp; JDK(重点)</h1><p><strong>安装时候选择tomcat软件版本要与程序开发使用的版本一致。jdk版本要进行与tomcat保持一致。</strong></p>
<p><strong>Tomcat和JDK之间的兼容性通常取决于Tomcat的版本和JDK的版本。以下是Tomcat和JDK之间的一些常见版本兼容性概述：</strong></p>
<p><strong>Tomcat 7：</strong></p>
<p>兼容JDK 1.6、JDK 1.7 和 JDK 1.8。Tomcat 7是基于Java EE 6规范构建的，而JDK 1.6、1.7和1.8都提供了对Java EE 6规范的良好支持。</p>
<p><strong>Tomcat 8：</strong></p>
<p>官方文档推荐使用JDK 1.7或JDK 1.8。Tomcat 8.0开始支持Servlet 3.1规范，并且与JDK 1.7和JDK 1.8兼容良好。</p>
<p>Tomcat 8.5对JDK 1.8的支持更为完善，并且也支持一些JDK 9的特性（但并非完全兼容）。</p>
<p><strong>Tomcat 9：</strong></p>
<p>需要JDK 1.8或更高版本。Tomcat 9基于Java EE 8（现在是Jakarta EE 8）规范，并完全支持Servlet 4.0。虽然JDK 9和JDK 10在某些情况下也可以工作，但Tomcat 9官方推荐使用JDK 1.8或更新的LTS（长期支持）版本，如JDK 11或更高。</p>
<p><strong>Tomcat 10：</strong></p>
<p>需要JDK 11或更高版本。Tomcat 10是基于Jakarta EE 9规范构建的，这是Java EE规范迁移到Eclipse基金会后的新版本。Tomcat 10要求至少JDK 11，因为它使用了JDK 11中引入的新特性。</p>
<p><strong>Tomcat 11：</strong></p>
<p>需要JDK 11或更高版本。Tomcat 11与Tomcat 10类似，也是基于Jakarta EE规范构建的，并且需要JDK 11或更新的版本来运行。</p>
<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1.关闭防火墙</span><br><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line">  <span class="comment">#systemctl stop firewalld 只是临时停止服务。</span></span><br><span class="line">  <span class="comment">#systemctl disable firewalld 禁止服务开机启动，但不影响当前状态。 </span></span><br><span class="line"></span><br><span class="line">2.关闭 selinux</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line"></span><br><span class="line">3.yum安装必要工具</span><br><span class="line">[root@localhost ~]# yum -y install wget</span><br><span class="line">[root@localhost ~]# yum -y install tree</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="二、安装jdk"><a href="#二、安装jdk" class="headerlink" title="二、安装jdk"></a>二、安装jdk</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1、上传二进制包jdk-8u211-linux-x64.tar.gz</span><br><span class="line">wget ftp://10.36.105.250//notes/stage3/2.tomcat/package/jdk-8u211-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line">2、解压项目包</span><br><span class="line"><span class="comment"># tar xf jdk-8u211-linux-x64.tar.gz</span></span><br><span class="line"></span><br><span class="line">3、编写java环境</span><br><span class="line"><span class="comment"># mv jdk1.8.0_211/ /usr/local/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/profile.d/java.sh    //添加以下内容</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> jAVA_HOME PATH</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/321001.png" alt="321001"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">4、<span class="built_in">source</span> 触发生效</span><br><span class="line"><span class="comment"># source /etc/profile.d/java.sh</span></span><br><span class="line"><span class="comment"># java -version     //进行测试</span></span><br></pre></td></tr></table></figure>

<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/321002.png" alt="321002"></p>
<h2 id="三、安装Tomcat"><a href="#三、安装Tomcat" class="headerlink" title="三、安装Tomcat"></a>三、安装Tomcat</h2><h3 id="3-1安装步骤"><a href="#3-1安装步骤" class="headerlink" title="3.1安装步骤"></a>3.1安装步骤</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">1、上传项目包apache-tomcat-8.0.53.tar.gz</span><br><span class="line">wget ftp://10.36.105.250//notes/stage3/2.tomcat/package/apache-tomcat-8.0.53.tar.gz</span><br><span class="line"></span><br><span class="line">2、解压</span><br><span class="line"><span class="comment"># tar xf apache-tomcat-8.0.53.tar.gz</span></span><br><span class="line"></span><br><span class="line">3、移动项目包到/usr/local</span><br><span class="line"><span class="comment"># mv apache-tomcat-8.0.53 /usr/local/tomcat</span></span><br><span class="line"></span><br><span class="line">4、启动和关闭tomcat</span><br><span class="line"><span class="comment"># /usr/local/tomcat/bin/startup.sh    //启动tomcat</span></span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/java</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line"></span><br><span class="line">【在启动tomcat情况下查看端口运行情况】</span><br><span class="line"><span class="comment"># netstat -tnlp | grep java</span></span><br></pre></td></tr></table></figure>



<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/321003.png" alt="321003"></p>
<p><strong>端口解释</strong></p>
<p>8005：这个端口负责监听关闭Tomcat的请求 shutdown:向以上端口发送的关闭服务器的命令字符串。</p>
<p>8009: 与其他http服务通信接口。比如apache</p>
<p>8080: 建立http也就是客户端访问连接用。可以修改</p>
<h3 id="3-2浏览器效果ip-8080"><a href="#3-2浏览器效果ip-8080" class="headerlink" title="3.2浏览器效果ip:8080"></a>3.2浏览器效果ip:8080</h3><blockquote>
<p><a href="http://192.168.133.134:8080/">http://192.168.133.134:8080/</a></p>
</blockquote>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/321004.png" alt="321004"></p>
<h3 id="3-3关闭tomcat"><a href="#3-3关闭tomcat" class="headerlink" title="3.3关闭tomcat"></a>3.3关闭tomcat</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/local/tomcat/bin/shutdown.sh	</span></span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/java</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="四、配置tomcat托管至systemd"><a href="#四、配置tomcat托管至systemd" class="headerlink" title="四、配置tomcat托管至systemd"></a>四、配置tomcat托管至systemd</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /usr/lib/systemd/system/tomcat.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Apache Tomcat Web Application Container</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">Environment=<span class="string">&quot;JAVA_HOME=/usr/local/java&quot;</span></span><br><span class="line">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# systemctl daemon-reload</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="五、重启tomcat-service并配置开机自启"><a href="#五、重启tomcat-service并配置开机自启" class="headerlink" title="五、重启tomcat.service并配置开机自启"></a>五、重启tomcat.service并配置开机自启</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl restart tomcat.service &amp;&amp; systemctl <span class="built_in">enable</span> tomcat.service</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/tomcat.service to /usr/lib/systemd/system/tomcat.service.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><a href="http://192.168.133.134:8080/">http://192.168.133.134:8080/</a></p>
<p><img src="https://rhcloudops.oss-cn-shenzhen.aliyuncs.com/img/321004.png" alt="321004"></p>
<h2 id="六、tomcat主目录介绍"><a href="#六、tomcat主目录介绍" class="headerlink" title="六、tomcat主目录介绍"></a>六、tomcat主目录介绍</h2><h3 id="6-1tomcat主目录介绍"><a href="#6-1tomcat主目录介绍" class="headerlink" title="6.1tomcat主目录介绍"></a>6.1tomcat主目录介绍</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost tomcat]# tree -L 1</span><br><span class="line">.</span><br><span class="line">├── bin    <span class="comment">#存放tomcat的管理脚本</span></span><br><span class="line">├── conf    <span class="comment">#tomcat的配置文件  // server.xml  tomcat 主配置文件</span></span><br><span class="line">├── lib    <span class="comment">#web应用调用的jar包存放路径</span></span><br><span class="line">├── LICENSE</span><br><span class="line">├── logs    <span class="comment">#tomcat日志存放目录，catalin.out日志为只要输出日志</span></span><br><span class="line">├── NOTICE</span><br><span class="line">├── RELEASE-NOTES</span><br><span class="line">├── RUNNING.txt</span><br><span class="line">├── temp    <span class="comment">#存放临时文件</span></span><br><span class="line">├── webapps    <span class="comment">#默认网站发布目录</span></span><br><span class="line">└── work    <span class="comment">#存放编译生产的.java与.class文件</span></span><br><span class="line"></span><br><span class="line">7 directories, 4 files</span><br></pre></td></tr></table></figure>



<h3 id="6-2tomcat配置文件目录"><a href="#6-2tomcat配置文件目录" class="headerlink" title="6.2tomcat配置文件目录"></a>6.2tomcat配置文件目录</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# tree -L 1</span><br><span class="line">.</span><br><span class="line">├── Catalina</span><br><span class="line">├── catalina.policy</span><br><span class="line">├── catalina.properties</span><br><span class="line">├── context.xml</span><br><span class="line">├── logging.properties</span><br><span class="line">├── server.xml    <span class="comment"># tomcat 主配置文件</span></span><br><span class="line">├── tomcat-users.xml    <span class="comment"># tomcat 管理用户配置文件</span></span><br><span class="line">├── tomcat-users.xsd</span><br><span class="line">└── web.xml</span><br><span class="line"></span><br><span class="line">1 directory, 8 files</span><br></pre></td></tr></table></figure>



<h3 id="6-3webapps目录介绍"><a href="#6-3webapps目录介绍" class="headerlink" title="6.3webapps目录介绍"></a>6.3webapps目录介绍</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@java-tomcat1 tomcat]# <span class="built_in">cd</span> webapps/</span><br><span class="line">[root@java-tomcat1 webapps]# tree -L 1</span><br><span class="line">.</span><br><span class="line">├── docs  <span class="comment">#tomcat的帮助文档</span></span><br><span class="line">├── examples  <span class="comment">#web应用实例</span></span><br><span class="line">├── host-manager  <span class="comment">#主机管理</span></span><br><span class="line">├── manager    <span class="comment">#登录管理</span></span><br><span class="line">└── ROOT    <span class="comment">#默认站点根目录</span></span><br><span class="line"></span><br><span class="line">5 directories, 0 files</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>第三阶段：大型网站高阶架构</category>
        <category>2.Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
</search>
